name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: jury-deliberation-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      - name: Build Docker image with Cloud Build
        run: |
          echo "Starting Cloud Build..."
          BUILD_ID=$(gcloud builds submit . --config ci/cloudbuild.yaml --substitutions=_IMAGE_URL=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/jury-deliberation-app/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }} --async --format="value(id)")
          echo "Build ID: $BUILD_ID"
          
          echo "Waiting for build to complete (checking every 30 seconds)..."
          for i in {1..20}; do
            BUILD_STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)" 2>/dev/null || echo "UNKNOWN")
            echo "Build status: $BUILD_STATUS (attempt $i/20)"
            
            if [ "$BUILD_STATUS" = "SUCCESS" ]; then
              echo "✅ Build completed successfully!"
              break
            elif [ "$BUILD_STATUS" = "FAILURE" ] || [ "$BUILD_STATUS" = "CANCELLED" ] || [ "$BUILD_STATUS" = "TIMEOUT" ]; then
              echo "❌ Build failed with status: $BUILD_STATUS"
              echo "Build logs: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=${{ env.PROJECT_ID }}"
              exit 1
            elif [ "$BUILD_STATUS" = "UNKNOWN" ]; then
              echo "⚠️  Could not get build status, continuing..."
            fi
            
            sleep 30
          done
          
          # Final status check
          BUILD_STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)" 2>/dev/null || echo "UNKNOWN")
          if [ "$BUILD_STATUS" != "SUCCESS" ]; then
            echo "❌ Build did not complete successfully. Final status: $BUILD_STATUS"
            echo "Build logs: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=${{ env.PROJECT_ID }}"
            exit 1
          fi
      
      - name: Deploy to Cloud Run
        run: |
          echo "Verifying image exists..."
          gcloud artifacts docker images list ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/jury-deliberation-app/${{ env.SERVICE_NAME }} --include-tags --filter="tags:${{ env.IMAGE_TAG }}" --limit=1 --format="value(digest)"
          
          echo "Deploying to Cloud Run..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/jury-deliberation-app/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --memory 4Gi \
            --cpu 2 \
            --concurrency 80 \
            --max-instances 10 \
            --timeout 3600 \
            --execution-environment gen2 \
            --set-env-vars FLASK_ENV=production,OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
            --allow-unauthenticated
          
          echo "✅ Deployment completed!"
            
      - name: Ensure public access
        run: |
          echo "Checking public access..."
          if ! gcloud run services get-iam-policy ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(bindings.members)" | grep -q "allUsers"; then
            echo "Setting public access..."
            gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --member=allUsers \
              --role=roles/run.invoker
          else
            echo "✅ Service is already publicly accessible"
          fi
      
      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Service deployed at: $SERVICE_URL"
      
      - name: Health check
        run: |
          echo "Testing deployment health..."
          SERVICE_URL="${{ steps.get-url.outputs.SERVICE_URL }}"
          
          # Wait for service to be ready and do multiple retries
          for i in {1..6}; do
            echo "Health check attempt $i/6..."
            if curl -s --max-time 30 "${SERVICE_URL}/health" > /dev/null; then
              echo "✅ Health check passed!"
              
              # Also test the main endpoint
              if curl -s --max-time 30 "${SERVICE_URL}/" | grep -q "Interactive Table"; then
                echo "✅ Main endpoint working!"
                exit 0
              else
                echo "⚠️ Main endpoint not responding correctly"
              fi
            else
              echo "❌ Health check failed, waiting 30 seconds..."
              sleep 30
            fi
          done
          
          echo "❌ All health checks failed!"
          exit 1
