name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: jury-deliberation-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      - name: Build Docker image with Cloud Build
        run: |
          # Submit build asynchronously to avoid log streaming issues
          echo "Starting Cloud Build..."
          gcloud builds submit . --config ci/cloudbuild.yaml --substitutions=_IMAGE_URL=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/jury-deliberation-app/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }} --async > build_output.txt
          
          # Extract build ID from output
          BUILD_ID=$(grep -o 'builds/[^]]*' build_output.txt | cut -d'/' -f2)
          echo "Build ID: $BUILD_ID"
          cat build_output.txt
          
          if [ -z "$BUILD_ID" ]; then
            echo "❌ Failed to get build ID"
            exit 1
          fi
          
          echo "Waiting for build to complete..."
          
          # Wait for build to complete
          for i in {1..60}; do
            BUILD_STATUS=$(gcloud builds describe $BUILD_ID --format="get(status)")
            echo "Build status: $BUILD_STATUS (attempt $i/60)"
            
            if [ "$BUILD_STATUS" = "SUCCESS" ]; then
              echo "✅ Build completed successfully!"
              break
            elif [ "$BUILD_STATUS" = "FAILURE" ] || [ "$BUILD_STATUS" = "CANCELLED" ] || [ "$BUILD_STATUS" = "TIMEOUT" ]; then
              echo "❌ Build failed with status: $BUILD_STATUS"
              echo "Check build logs: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=${{ env.PROJECT_ID }}"
              exit 1
            fi
            
            sleep 30
          done
          
          # Final status check
          if [ "$BUILD_STATUS" != "SUCCESS" ]; then
            echo "❌ Build did not complete within timeout period"
            exit 1
          fi
      
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/jury-deliberation-app/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --memory 4Gi \
            --cpu 2 \
            --concurrency 80 \
            --max-instances 10 \
            --timeout 3600 \
            --set-env-vars FLASK_ENV=production
      
      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Service deployed at: $SERVICE_URL"
      
      - name: Health check
        run: |
          echo "Testing deployment health..."
          sleep 30  # Wait for service to be ready
          if curl -s --max-time 30 "${{ steps.get-url.outputs.SERVICE_URL }}/health" > /dev/null; then
            echo "✅ Health check passed!"
          else
            echo "❌ Health check failed!"
            exit 1
          fi
